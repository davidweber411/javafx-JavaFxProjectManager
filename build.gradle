plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.14'
}

group 'com.wedasoft'
version '1.0.0'

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    javaFxVersion = '17.0.8'
    junitVersion = '5.10.0'
    assertJVersion = '3.24.2'
    lombokVersion = '1.18.28'
    mainClassNameParam = 'com.wedasoft.javafxprojectgenerator.MainApplicationLauncher'
}

//noinspection GroovyUnusedAssignment
mainClassName = "${mainClassNameParam}"
//noinspection GroovyUnusedAssignment
sourceCompatibility = '17'
//noinspection GroovyUnusedAssignment
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

javafx {
    version = "${javaFxVersion}"
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testImplementation("org.assertj:assertj-core:${assertJVersion}")

    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // https://mvnrepository.com/artifact/com.wedasoft/simplejavafxapplicationbase
    implementation("com.wedasoft:simplejavafxapplicationbase:1.6.0")

    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation 'commons-io:commons-io:2.13.0'

}

test {
    useJUnitPlatform()
}

task createCustomFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': "${mainClassNameParam}"
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}